"""
  Summary of costs for reducing a divisor
  
  Deg | Type |   I |   M |  A |
  ----+------+-----+-----+----+
    3 |   32 |   0 |   8 | 11 |
      |   33 |   0 |   0 |  0 |
  ----+------+-----+-----+----+
    4 |   41 |   1 |  27 | 28 | Typical only
      |   42 |   0 |   0 |  1 | 
      |   43 |   0 |   6 | 11 |
      |   44 |   0 |   0 |  0 |
  ----+------+-----+-----+----+
    5 |   51 |   1 |  27 | 36 | Typical only
      |   52 |   0 |   1 |  3 |
      |   53 |   0 |  11 | 13 |
      |   54 |   0 |   7 | 10 |
  ----+------+-----+-----+----+
    6 |   61 |   1 |   ? |  ? | Typical only
      |   62 |   0 |   2 |  4 |
      |   63 |   0 |   8 | 13 |
      |   64 |   0 |  12 | 19 |
      |   65 |   0 |   0 |  0 |
"""



def reduce(D) :
  """
    Computes the unique reduced divisor equivalent to D.
  """
  if (D.reduced) :
    return D
  
  if (D.type == 61) and (D.typical) :
    return reduce_61t(D)
  elif (D.type == 62) :
    return reduce_62(D)
  elif (D.type == 63) :
    return reduce_63(D)
  elif (D.type == 64) :
    return reduce_64(D)
  elif (D.type == 65) :
    return reduce_65(D)
  if (D.type == 51) and (D.typical) :
    return reduce_51t(D)
  elif (D.type == 52) :
    return reduce_52(D)
  elif (D.type == 53) :
    return reduce_53(D)
  elif (D.type == 54) :
    return reduce_54(D)
  if (D.type == 41) and (D.typical) :
    return reduce_41t(D)
  elif (D.type == 42) :
    return reduce_42(D)
  elif (D.type == 43) :
    return reduce_43(D)
  elif (D.type == 44) :
    return reduce_44(D)
  elif (D.type == 32) :
    return reduce_32(D)
  elif (D.type == 33) :
    return reduce_33(D)

  return flip(flip(D))



def reduce_32(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u0, u1 = D.f[0:2]
  v3 = D.g[3]
  # D is generated by polynomials u and v of the forms 
  #
  #   u = y            + u1*x + u0
  #   v = x^3 + v3*x^2 + v1*x + v0
  #
  # Compute polynomials
  #
  #   f = x + f0
  #   g = y^2 + g4*x*y + g3*x^2 + g2*y + g1*x + g0
  #
  # such that
  #
  #   fv = -gu (mod C)
  g4 = c8 - u1
  g3 = c7 - g4*u1
  f0 = -v3 - g3*u1
  g2 = c5 - u0
  g1 = c4 - g4*u0 - g2*u1
  g0 = c2 - g2*u0

  # Reduce g modulo f
  g2 = g2 - g4*f0
  g0 = g0 + f0*(f0*g3 - g1)
  
  # Result is of type 22
  # Total : 0I 8M 11A
  return C34CrvDiv(C, [[f0, 1], [g0, 0, g2, 0, 0, 1], []],
      degree = 2, typ = 22, reduced = True, typical = False)



def reduce_33(D) :
  # Result is of type 0
  # Total 0I 0M 0A
  return D.C.zero_divisor()



def reduce_41t(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u0, u1, u2, u3 = D.f[0:4]
  v0, v1, v2, v3 = D.g[0:4]

  # Compute
  #
  #   f =          x^2 + f2*y + f1*x + f0
  #   g = x*y + g3*x^2 + g2*y + g1*x + g0
  # 
  # such that
  #
  #   fv = gu (mod C)
  g3 = - u3
  f2 = u3^2 + v3
  f2_inv = 1/f2
  m1 = c8*f2 + u2
  m2 = f2*(c7 - v3) - u2*u3 + u1 - v2
  m3 = -u1*u3 - v1
  m4 = m2 - u3*m1
  g1 = -f2_inv*(u3*m3 + v3*m4)
  f1 = -f2_inv*(u3*(m4 + u1) + v1)
  g2 = f1 - m1
  f0 = f2*(c5 - v2) + g2*u2
  g0 = -f2*(c4 - v1) - g2*u1 - g1*u2 + f1*v2 - u0

  # Reduce g modulo f
  g2 = g2 - g3*f2
  g1 = g1 - g3*f1
  g0 = g0 - g3*f0

  # Compute third polynomial ...
  h0 = f2_inv*(f0*g1 + g0*(g2 - f1))
  h1 = f2_inv*(g1*g2 - g0)
  h2 = g1 + f2_inv*(g2*(g2 - f1) + f0)

  # Total : 1I 26M 1SQ 28A
  return C34CrvDiv(C, [[f0, f1, f2, 1],
                       [g0, g1, g2, 0, 1],
                       [h0, h1, h2, 0, 0, 1]],
      degree = 3, typ = 31, reduced = True, typical = True)



def reduce_42(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u1     = D.f[1]
  v1, v2 = D.g[1:3]
  # D is generated by polynomials u and v of the forms 
  #
  #   u = x^2        + u1*x + u0
  #   v = x*y + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f = x + f0
  #   g = y + g0
  #
  # such that
  #
  #   fv = gu (mod C)
  f0 = u1 - v2
  g0 = v1

  # Total : 0I 0M 1A
  return C34CrvDiv(C, [[f0, 1], [g0, 0, 1], []],
      degree = 1, typ = 11, reduced = True, typical = False)



def reduce_43(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u0, u1, u2 = D.f[0:3]
  v1, v2 = D.g[1:3]
  v4 = D.g[4]
  # D is generated by polynomials u and v of the forms 
  #
  #   u = x^2          + u2*y + u1*x + u0
  #   v = y^2 + v4*x*y + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f =          y + f1*x + f0
  #   g = x^2 + g2*y + g1*x + g0
  #
  # such that
  #
  #   fv = -gu (mod C)
  f1 = c8 - v4
  g2 = c7 - f1*v4 - u2
  g1 = -u1
  f0 = c5 - g2*u2 - v2
  g0 = c6 + c3 - g1*u1 - f1*v1 - u0
  
  # Reduce g modulo f
  g1 = g1 - g2*f1
  g0 = g0 - g2*f0

  # Result is of type 21
  # Total : 0I 6M 11A
  return C34CrvDiv(C, [[f0, f1, 1], [g0, g1, 0, 1], []],
      degree = 2, typ = 21, reduced = True, typical = False)



def reduce_44(D) :
  # Result is of type 0
  # Total 0I 0M 0A
  return D.C.zero_divisor()



def reduce_51t(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u1, u2, u3, u4 = D.f[1:5]
  v1, v2, v3, v4 = D.g[1:5]
  
  # D is generated by polynomials u and v of the forms 
  #
  #   u = y^2 + u4*xy + u3*x^2 + u2*y + u1*x + u0
  #   v = x^3 + v4*xy + v3*x^2 + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f =          x^2 + f2*y + f1*x + f0
  #   g = x*y + g3*x^2 + g2*y + g1*x + g0
  #
  # such that
  #
  #   fv = -gu (mod C)
  g3 = c8 - u4
  f2 = c7 - g3*u4 - u3 - v4
  f2_inv = 1/f2
  m1 = g3*u3 + v3
  m2 = f2*v4 - c5 + u2
  m3 = g3*u2 + f2*v3 - c4 + u1 + v2
  m4 = m2 + m1*(u4 - c8)
  m5 = m3 + m1*(u3 - c7)
  g1 = f2_inv*(g3*m5 + m4*(v4 + u3 - c7))
  f1 = -f2_inv*(m4*u4 - m5)
  g2 = f1 + m1
  f0 = c6 + c3 - g3*u1 - g1*u3 - f1*v3 - v1
  g0 = g2*(c5 - u2) - f2*v2
  
  # Reduce g modulo f
  g2 = g2 - g3*f2
  g1 = g1 - g3*f1
  g0 = g0 - g3*f0

  # Compute third polynomial ...
  h0 = f2_inv*(f0*g1 + g0*(g2 - f1))
  h1 = f2_inv*(g1*g2 - g0)
  h2 = g1 + f2_inv*(g2*(g2 - f1) + f0)

  # A is of type 31 (typical)
  # Total : 1I 27M 36A
  return C34CrvDiv(C, [[f0, f1, f2, 1],
                       [g0, g1, g2, 0, 1],
                       [h0, h1, h2, 0, 0, 1]],
                       degree = 3, typ = 31, reduced = True, typical = True)



def reduce_52(D) :
  C = D.C
  u1, u2, u3 = D.f[1:4]
  v2 = D.g[2]
  
  # D is generated by polynomials u and v of the forms 
  #
  #   u =  xy + u3*x^2 + u2*y + u1*x + u0
  #   v = y^2 + v3*x^2 + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f = x + f0
  #   g = y + g1*x + g0
  #
  # such that
  #
  #   fv = gu (mod C)
  u2u3 = u2*u3
  g1 = - u3
  f0 = u2
  g0 = u2u3 - u1 + v2

  # Reduce g modulo f
  g0 = g0 + u2u3 # In characteristic 2, this cancels u2u3

  # A is of type 11
  # Total : 0I 1M 3A
  return C34CrvDiv(C, [[f0, 1], [g0, 0, 1], []],
      degree = 1, typ = 11, reduced = True, typical = False)



def reduce_53(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u1, u2, u3 = D.f[1:4]
  v1, v2, v3 = D.g[1:4]
  v5 = D.g[5]
  
  # D is generated by polynomials u and v of the forms 
  #
  #   u = xy           + u3*x^2 + u2*y + u1*x + u0
  #   v = x^3 + v5*y^2 + v3*x^2 + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f =          y + f1*x + f0
  #   g = x^2 + g2*y + g1*x + g0
  #
  # such that
  #
  #   fv = -gu (mod C)
  f1 = u3 + v5
  g2 = v5*(f1 - c8)
  g1 = -g2*u3 - c7*v5 - u2 + v3
  f0 = g1*u3 - f1*v3 + u1
  g0 = -g2*u1 - g1*u2 + f1*v2 - c4*v5 + v1
  
  # Reduce g modulo f
  g1 = g1 - g2*f1
  g0 = g0 - g2*f0

  # A is of type 11
  # Total : 0I 11M 13A
  return C34CrvDiv(C, [[f0, f1, 1], [g0, g1, 0, 1], []],
      degree = 2, typ = 21, reduced = True, typical = False)

  
  
def reduce_54(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u0, u1, u2 = D.f[0:3]
  v1, v4, v5 = D.g[1], D.g[4], D.g[5]
  
  # D is generated by polynomials u and v of the forms 
  #
  #   u = x^2                   + u2*y + u1*x + u0
  #   v = xy^2 + v5*y^2 + v4*xy + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f = x + f0
  #   g = y^2 + g3*x^2 + g2*y + g1*x + g0
  #
  # such that
  #
  #   fv = -gu (mod C)
  g3 = u2
  f0 = -c8*u2 + u1 - v5
  g2 = u2*(c7 - u2) + v4
  g1 = -u1*u2
  g0 = u2*(c3 + c6 - u0 + u1^2) + v1

  # Reduce g modulo f
  g0 = g0 + f0*(f0*g3 - g1)

  # A is of type 22
  # Total : 0I 6M 1SQ 10A
  return C34CrvDiv(C, [[f0, 1], [g0, 0, g2, 0, 0, 1], []],
      degree = 2, typ = 22, reduced = True, typical = False)



def reduce_61t(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.c
  r0, r1, r2, r3, r4, r5 = D.f[0:6]
  s0, s1, s2, s3, s4, s5 = D.g[0:6]

  # Compute
  #
  #   f =          x^2 + f2*y + f1*x + f0
  #   g = x*y + g3*x^2 + g2*y + g1*x + g0
  # 
  # such that
  #
  #   gr = fs (mod C)
  g3 = r5
  f2 = r5*(r5 - c8) + r4 - s5

  assert f2 != 0, "Divisor is non-typical."
  inv = 1/f2

  g2 = s4 + s5*(r5 - c8) + inv*(r5*(r5*(r3 - c6) + s5*(r4 - c7) + c5 - s3) + s5*(r3 - s4) - r2)
  f1 = r5*(r4 - c7) + g2 + r3 - s4
  g1 = r5*(c6 - r3) - (f2*s5 - g2*r5) + s3
  f0 = c7*(f2*s5 - g2*r5) + r5*(r2 - c4) + g2*r3 + g1*r4 - f2*s3 - f1*s4 + r1 - s2
  g0 = -c6*(f2*s5 - g2*r5) + r5*(c3 - r1) - g1*r3 + f1*s3 + s1

  # Reduce g modulo f
  g2 = g2 - g3*f2
  g1 = g1 - g3*f1
  g0 = g0 - g3*f0

  # Compute third polynomial ...
  h0 = inv*(f0*g1 + g0*(g2 - f1))
  h1 = inv*(g1*g2 - g0)
  h2 = g1 + inv*(g2*(g2 - f1) + f0)

  return C34CrvDiv(C, [[f0, f1, f2, 1],
                       [g0, g1, g2, 0, 1],
                       [h0, h1, h2, 0, 0, 1]])



def reduce_62(D) :
  C = D.C
  c5, c8 = C.c[5], C.c[8]
  u2, u3, u4 = D.f[2:5]
  v3 = D.g[3]
  
  # D is generated by polynomials u and v of the forms 
  #
  #   u = y^2 + u4*xy + u3*x^2 + u2*y + u1*x + u0
  #   v = x^3 + v4*xy + v3*x^2 + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f = x + f0
  #   g = y + g1*x + g0
  #
  # such that
  #
  #   fv = -gu (mod C)
  g1 = c8 - u4
  f0 = -g1*u3 - v3
  g0 = c5 - u2

  # Reduce g modulo f
  g0 = g0 - g1*f0 # In characteristic 2, this cancels u2u3

  # A is of type 11
  # Total : 0I 2M 4A
  return C34CrvDiv(C, [[f0, 1], [g0, 0, 1], []],
      degree = 1, typ = 11, reduced = True, typical = False)



def reduce_63(D) : 
  C = D.C
  c5, c7, c8 = C.c[5], C.c[7], C.c[8]
  u2, u3, u4 = D.f[2:5]
  v2, v3, v4 = D.g[2:5]
  v6 = D.g[6]
  
  # D is generated by polynomials u and v of the forms 
  #
  #   u = y^2           + u4*xy + u3*x^2 + u2*y + u1*x + u0
  #   v = x^2y + v6*x^3 + v4*xy + v3*x^2 + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f =          y + f1*x + f0
  #   g = x^2 + g2*y + g1*x + g0
  #
  # such that
  #
  #   fv = gu (mod C)
  f1 = u4 - v6
  g2 = u3 - f1*v6
  g1 = g2*(c8 - u4) + v4
  f0 = g2*(u3 - c7) + g1*u4 - f1*v4 + u2 - v3
  g0 = g2*(c5 - u2) + v2
  
  # Reduce g modulo f
  g1 = g1 - g2*f1
  g0 = g0 - g2*f0

  # A is of type 11
  # Total : 0I 8M 13A
  return C34CrvDiv(C, [[f0, f1, 1], [g0, g1, 0, 1], []],
      degree = 2, typ = 21, reduced = True, typical = False)

  
  
def reduce_64(D) :
  C = D.C
  c0, c1, c2, c3, c4, c5, c6, c7, c8 = C.coefficients()
  u0, u1, u2, u3 = D.f[0:4]
  v2, v5, v6 = D.g[2], D.g[5], D.g[6]
  
  # D is generated by polynomials u and v of the forms 
  #
  #   u = xy                    + u3*x^2 + u2*y + u1*x + u0
  #   v = x^4 + v6*x^3 + v5*y^2 + v3*x^2 + v2*y + v1*x + v0
  #
  # Compute polynomials
  #
  #   f = x + f0
  #   g = y^2 + g4*xy + g3*x^2 + g2*y + g1*x + g0
  #
  # such that
  #
  #   fv = -gu (mod C)
  g4 = c8 - u3
  g3 = c7 - g4*u3
  f0 = u2 - g3*u3 - v6
  g2 = u2*u3 + c5 - u1 - v5
  g1 = u2*(c7 - g3) - g4*u1 - g2*u3 + c4
  g0 = u2*(c4 - g1) - g4*u0 - g2*u1 + c2 - v2

  # Reduce g modulo f
  g2 = g2 - g4*f0
  g0 = g0 + f0*(f0*g3 - g1)

  # A is of type 22
  # Total : 0I 12M 19A
  return C34CrvDiv(C, [[f0, 1], [g0, 0, g2, 0, 0, 1], []],
      degree = 2, typ = 22, reduced = True, typical = False)



def reduce_65(D) :
  # Result is of type 0
  # Total 0I 0M 0A
  return D.C.zero_divisor()
